// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.

/*=============================================================================

=============================================================================*/

#include "Common.usf"
#include "DeferredShadingCommon.usf"
#include "BRDF.usf"
#include "SHCommon.usf"
#include "ReflectionEnvironmentShared.usf"
#include "SkyLightShared.usf"

struct FCopyToCubeFaceVSOutput
{
	float2 UV : TEXCOORD0;
	float3 ScreenVector : TEXCOORD1;
	float4 Position : SV_POSITION;
};

void CopyToCubeFaceVS(
	in float2 InPosition : ATTRIBUTE0,
	in float2 InUV       : ATTRIBUTE1,
	out FCopyToCubeFaceVSOutput Out
	)
{	
	Out.UV = InUV;
	Out.Position = float4(InPosition, 0, 1);
	Out.ScreenVector = mul(float4(InPosition, 1, 0), View.ScreenToTranslatedWorld).xyz;
}

struct FRouteToCubeFaceGSOut
{
	FCopyToCubeFaceVSOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};

int CubeFace;

[maxvertexcount(3)]
void RouteToCubeFaceGS(triangle FCopyToCubeFaceVSOutput Input[3], inout TriangleStream<FRouteToCubeFaceGSOut> OutStream)
{
	FRouteToCubeFaceGSOut Vertex0;
	Vertex0.Vertex = Input[0];
	Vertex0.LayerIndex = CubeFace;

	FRouteToCubeFaceGSOut Vertex1;
	Vertex1.Vertex = Input[1];
	Vertex1.LayerIndex = CubeFace;

	FRouteToCubeFaceGSOut Vertex2;
	Vertex2.Vertex = Input[2];
	Vertex2.LayerIndex = CubeFace;

	OutStream.Append(Vertex0);
	OutStream.Append(Vertex1);
	OutStream.Append(Vertex2);
}

Texture2D InTexture;
SamplerState InTextureSampler;

/** X = 1 if skylight, 0 otherwise, Y = Sky distance threshold, Z = whether a skylight's lower hemisphere should be black. */
float3 SkyLightCaptureParameters;

void CopySceneColorToCubeFaceColorPS(
	FRouteToCubeFaceGSOut Input,
	out float4 OutColor : SV_Target0
	)
{ 
	float SceneDepth = CalcSceneDepth(Input.Vertex.UV);
	float3 SceneColor = Texture2DSample(InTexture, InTextureSampler, Input.Vertex.UV).rgb;

	// Convert INF's to valid values
	SceneColor = min(SceneColor, 65503);
	float3 WorldPosition = Input.Vertex.ScreenVector * SceneDepth + View.ViewOrigin.xyz;

	float Alpha = 1;

	if (SkyLightCaptureParameters.x > 0)
	{
		// Assuming we're on a planet and no sky lighting is coming from below the horizon
		// This is important to avoid leaking from below since we are integrating incoming lighting and shadowing separately
		float AboveHorizonMask = Input.Vertex.ScreenVector.z > 0 || SkyLightCaptureParameters.z < 1;
		SceneColor *= AboveHorizonMask;
	}
	else
	{
		float RadialDistance = length(WorldPosition - View.ViewOrigin.xyz);
		float MaxDistance = SkyLightCaptureParameters.y;

		// Setup alpha to fade out smoothly past the max distance
		// This allows a local reflection capture to only provide reflections where it has valid data, falls back to sky cubemap
		Alpha = 1 - smoothstep(.8f * MaxDistance, MaxDistance, RadialDistance);
	}

	// Pre-multiplied alpha for correct filtering
	OutColor = float4(SceneColor * Alpha, Alpha);
}

float3 GetCubemapVector(float2 ScaledUVs)
{
	float3 CubeCoordinates;

	//@todo - this could be a 3x3 matrix multiply
	if (CubeFace == 0)
	{
		CubeCoordinates = float3(1, -ScaledUVs.y, -ScaledUVs.x);
	}
	else if (CubeFace == 1)
	{
		CubeCoordinates = float3(-1, -ScaledUVs.y, ScaledUVs.x);
	}
	else if (CubeFace == 2)
	{
		CubeCoordinates = float3(ScaledUVs.x, 1, ScaledUVs.y);
	}
	else if (CubeFace == 3)
	{
		CubeCoordinates = float3(ScaledUVs.x, -1, -ScaledUVs.y);
	}
	else if (CubeFace == 4)
	{
		CubeCoordinates = float3(ScaledUVs.x, -ScaledUVs.y, 1);
	}
	else
	{
		CubeCoordinates = float3(-ScaledUVs.x, -ScaledUVs.y, -1);
	}

	return CubeCoordinates;
}

struct FDownsampleGSOut
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};

[maxvertexcount(3)]
void DownsampleGS(triangle FScreenVertexOutput Input[3], inout TriangleStream<FDownsampleGSOut> OutStream)
{
	FDownsampleGSOut Vertex0;
	Vertex0.Vertex = Input[0];
	Vertex0.LayerIndex = CubeFace;

	FDownsampleGSOut Vertex1;
	Vertex1.Vertex = Input[1];
	Vertex1.LayerIndex = CubeFace;

	FDownsampleGSOut Vertex2;
	Vertex2.Vertex = Input[2];
	Vertex2.LayerIndex = CubeFace;

	OutStream.Append(Vertex0);
	OutStream.Append(Vertex1);
	OutStream.Append(Vertex2);
}

TextureCube SourceTexture;
SamplerState SourceTextureSampler;

void CopyCubemapToCubeFaceColorPS(
	FDownsampleGSOut Input,
	out float4 OutColor : SV_Target0
	)
{ 
	float2 ScaledUVs = Input.Vertex.UV * 2 - 1;
	float3 CubeCoordinates = GetCubemapVector(ScaledUVs);
	OutColor = TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, CubeCoordinates, 0);

	if (SkyLightCaptureParameters.x > 0)
	{
		// Assuming we're on a planet and no sky lighting is coming from below the horizon
		// This is important to avoid leaking from below since we are integrating incoming lighting and shadowing separately
		float AboveHorizonMask = (CubeCoordinates.z > 0) || SkyLightCaptureParameters.z < 1;
		OutColor *= AboveHorizonMask;
	}
}

int SourceMipIndex;

float4 SampleCubemap(float3 Coordinates)
{
	return TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, Coordinates, SourceMipIndex);
}

void DownsamplePS(
	FDownsampleGSOut Input,
	out float4 OutColor : SV_Target0
	)
{ 
	float2 ScaledUVs = Input.Vertex.UV * 2 - 1;
	float3 CubeCoordinates = GetCubemapVector(ScaledUVs);

	OutColor = SampleCubemap(CubeCoordinates);
}

uint NumCaptureArrayMips;

/** Cube map array of reflection captures. */
TextureCube ReflectionEnvironmentColorTexture;
SamplerState ReflectionEnvironmentColorSampler;

void ComputeBrightnessMain(
	in float4 UVAndScreenPos : TEXCOORD0, 
	out float4 OutColor : SV_Target0
	)
{ 
	// Sample the 6 1x1 cube faces and average
	float3 AverageColor = TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, float3(1, 0, 0), NumCaptureArrayMips - 1).rgb;
	AverageColor += TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, float3(-1, 0, 0), NumCaptureArrayMips - 1).rgb;
	AverageColor += TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, float3(0, 1, 0), NumCaptureArrayMips - 1).rgb;
	AverageColor += TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, float3(0, -1, 0), NumCaptureArrayMips - 1).rgb;
	AverageColor += TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, float3(0, 0, 1), NumCaptureArrayMips - 1).rgb;
	AverageColor += TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, float3(0, 0, -1), NumCaptureArrayMips - 1).rgb;

	OutColor = dot(AverageColor / 6, .3333f);
}

#ifndef NUM_FILTER_SAMPLES
#define NUM_FILTER_SAMPLES 1
#endif

float4 ConeSamples[NUM_FILTER_SAMPLES];

Texture2D AverageBrightnessTexture;
SamplerState AverageBrightnessSampler;

void BlurPS(
	FDownsampleGSOut Input,
	out float4 OutColor : SV_Target0
	)
{ 
	float2 ScaledUVs = Input.Vertex.UV * 2 - 1;
	float3 CubeCoordinates = GetCubemapVector(ScaledUVs);

#define FILTER_CUBEMAP 1
#if FILTER_CUBEMAP

	// Generate a coordinate system, where the Z axis is the direction from the cubemap to the current texel
	float3 NormalizedCubeCoordinates = normalize(CubeCoordinates);
	float3 XAxis = normalize(cross(NormalizedCubeCoordinates, float3(0, 1, 0)));
	float3 YAxis = cross(NormalizedCubeCoordinates, XAxis);
	float4 FilteredValue = 0;

	// Generate samples in a cone and filter
	for (int SampleIndex = 0; SampleIndex < NUM_FILTER_SAMPLES; SampleIndex++)
	{
		float3 SampleVector = FilterData.Samples[SampleIndex].x * XAxis + FilterData.Samples[SampleIndex].y * YAxis + FilterData.Samples[SampleIndex].z * NormalizedCubeCoordinates;
		float4 Sample = SampleCubemap(SampleVector);
		FilteredValue += Sample;
	}

	OutColor = FilteredValue / NUM_FILTER_SAMPLES;

#else

	OutColor = SampleCubemap(CubeCoordinates);

#endif

	// Remove low frequency
	// TODO match the frequency removed to the one added. In other words divide out 2nd order SH instead of 1st.
	float LowFrequencyBrightness = Texture2DSample(AverageBrightnessTexture, AverageBrightnessSampler, float2(0, 0));

	// Using too small a minimum value here will cause some GPUs to emit INF on OS X.
	OutColor.rgb /= max(LowFrequencyBrightness, 0.01f);
}

float4 CoefficientMask0;
float4 CoefficientMask1;
float CoefficientMask2;
int NumSamples;

void DiffuseIrradianceCopyPS(
	FDownsampleGSOut Input,
	out float4 OutColor : SV_Target0
	)
{ 
	float2 ScaledUVs = Input.Vertex.UV * 2 - 1;
	float3 CubeCoordinates = normalize(GetCubemapVector(ScaledUVs));

	float SquaredUVs = 1 + dot(ScaledUVs, ScaledUVs);
	// Dividing by NumSamples here to keep the sum in the range of fp16, once we get down to the 1x1 mip
	float TexelWeight = 4 / (sqrt(SquaredUVs) * SquaredUVs * NumSamples);

	FThreeBandSHVector SHCoefficients = SHBasisFunction3(CubeCoordinates);
	float CurrentSHCoefficient = dot(SHCoefficients.V0, CoefficientMask0) + dot(SHCoefficients.V1, CoefficientMask1) + SHCoefficients.V2 * CoefficientMask2;
	float3 TexelLighting = SampleCubemap(CubeCoordinates).rgb;

	OutColor = float4(TexelLighting * CurrentSHCoefficient * TexelWeight, TexelWeight);
}

float4 Sample01;
float4 Sample23;

void DiffuseIrradianceAccumulatePS(
	FDownsampleGSOut Input,
	out float4 OutColor : SV_Target0
	)
{ 
	float4 AccumulatedValue = 0;

	{
		float2 ScaledUVs = saturate(Input.Vertex.UV + Sample01.xy) * 2 - 1;
		float3 CubeCoordinates = GetCubemapVector(ScaledUVs);
		AccumulatedValue += SampleCubemap(CubeCoordinates);
	}
	
	{
		float2 ScaledUVs = saturate(Input.Vertex.UV + Sample01.zw) * 2 - 1;
		float3 CubeCoordinates = GetCubemapVector(ScaledUVs);
		AccumulatedValue += SampleCubemap(CubeCoordinates);
	}

	{
		float2 ScaledUVs = saturate(Input.Vertex.UV + Sample23.xy) * 2 - 1;
		float3 CubeCoordinates = GetCubemapVector(ScaledUVs);
		AccumulatedValue += SampleCubemap(CubeCoordinates);
	}

	{
		float2 ScaledUVs = saturate(Input.Vertex.UV + Sample23.zw) * 2 - 1;
		float3 CubeCoordinates = GetCubemapVector(ScaledUVs);
		AccumulatedValue += SampleCubemap(CubeCoordinates);
	}
	
	OutColor = AccumulatedValue;
}

void AccumulateCubeFacesPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	float4 AccumulatedValue = TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, float3(1, 0, 0), SourceMipIndex);
	AccumulatedValue += TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, float3(-1, 0, 0), SourceMipIndex);
	AccumulatedValue += TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, float3(0, 1, 0), SourceMipIndex);
	AccumulatedValue += TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, float3(0, -1, 0), SourceMipIndex);
	AccumulatedValue += TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, float3(0, 0, 1), SourceMipIndex);
	AccumulatedValue += TextureCubeSampleLevel(SourceTexture, SourceTextureSampler, float3(0, 0, -1), SourceMipIndex);
	OutColor = float4(4 * PI * AccumulatedValue.rgb / ( max(AccumulatedValue.a, .00001f)), 0);
}

// Used during reflection captures to get bounce light from specular surfaces
void SpecularBouncePS(in float4 UVAndScreenPos : TEXCOORD0, out float4 OutColor : SV_Target0)
{
	float2 UV = UVAndScreenPos.xy;

	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	FGBufferData GBuffer = ScreenSpaceData.GBuffer;

	// Factors derived from EnvBRDFApprox( SpecularColor, 1, 1 ) == SpecularColor * 0.4524 - 0.0024
	OutColor = float4( 0.45 * GBuffer.SpecularColor * GBuffer.LowGlossIndirectSpecular, 0 );
}

float4 CapturePositionAndRadius;
float4 CaptureProperties;
float4x4 CaptureBoxTransform;
float4 CaptureBoxScales;

/** Standard deferred shading implementation of reflection environment, used in feature level SM4 */
void StandardDeferredReflectionPS(
	float4 InScreenPosition : TEXCOORD0,
	out float4 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float2 ScreenUV = InScreenPosition.xy / InScreenPosition.w * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(ScreenUV);

	BRANCH
	// Only light pixels marked as using deferred shading
	if (ScreenSpaceData.GBuffer.LightingModelId > 0)
	{
		FGBufferData InGBufferData = ScreenSpaceData.GBuffer;
		float SceneDepth = CalcSceneDepth(ScreenUV);
		float4 HomogeneousWorldPosition = mul(float4(InScreenPosition.xy / InScreenPosition.w * SceneDepth, SceneDepth, 1), View.ScreenToWorld);
		float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;
		float3 CameraToPixel = normalize(WorldPosition - View.ViewOrigin.xyz);
		float3 ReflectionVector = reflect(CameraToPixel, InGBufferData.WorldNormal);

		float3 SmoothColor = 0;
		float3 RoughColor = 0;
		GetReflectionSmoothAndRoughColor(ScreenSpaceData, CameraToPixel, SmoothColor, RoughColor);

		float3 ProjectedCaptureVector = ReflectionVector;
		float DistanceAlpha = 0;

		//@todo - find a way to share this code with the compute shader version

		#if SPHERE_CAPTURE
			float3 RayDirection = ReflectionVector * CapturePositionAndRadius.w;
			float ProjectionSphereRadius = CapturePositionAndRadius.w * 1.2f;
			float SphereRadiusSquared = ProjectionSphereRadius * ProjectionSphereRadius;

			float3 ReceiverToSphereCenter = WorldPosition - CapturePositionAndRadius.xyz;
			float ReceiverToSphereCenterSq = dot(ReceiverToSphereCenter, ReceiverToSphereCenter);

			float3 CaptureVector = WorldPosition - CapturePositionAndRadius.xyz;
			float CaptureVectorLength = sqrt(dot(CaptureVector, CaptureVector));
			float NormalizedDistanceToCapture = saturate(CaptureVectorLength / CapturePositionAndRadius.w);

			// Find the intersection between the ray along the reflection vector and the capture's sphere
			float3 QuadraticCoef;
			QuadraticCoef.x = dot(RayDirection, RayDirection);
			QuadraticCoef.y = 2 * dot(RayDirection, ReceiverToSphereCenter);
			QuadraticCoef.z = ReceiverToSphereCenterSq - SphereRadiusSquared;

			float Determinant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;
							 
			BRANCH
			// Only continue if the ray intersects the sphere
			if (Determinant >= 0)
			{ 
				float Epsilon = .000001f;
				float InvTwoA = .5 / (QuadraticCoef.x + Epsilon);
				float FarIntersection = (sqrt(Determinant) - QuadraticCoef.y) * InvTwoA;

				float3 IntersectPosition = WorldPosition + FarIntersection * RayDirection;
				ProjectedCaptureVector = IntersectPosition - CapturePositionAndRadius.xyz;
				// Fade out based on distance to capture
				DistanceAlpha = 1.0 - smoothstep(.6, 1, NormalizedDistanceToCapture);
			}
		#elif BOX_CAPTURE
			float3 RayDirection = ReflectionVector * CapturePositionAndRadius.w * 2;

			// Transform the ray into the local space of the box, where it is an AABB with mins at -1 and maxs at 1
			float3 LocalRayStart = mul(float4(WorldPosition, 1), CaptureBoxTransform).xyz;
			float3 LocalRayDirection = mul(RayDirection, (float3x3)CaptureBoxTransform);

			// Intersections.y is the intersection with the far side of the box
			float2 Intersections = LineBoxIntersect(LocalRayStart, LocalRayStart + LocalRayDirection, -1, 1);

			{
				// Compute the reprojected vector
				float3 IntersectPosition = WorldPosition + Intersections.y * RayDirection;
				ProjectedCaptureVector = IntersectPosition - CapturePositionAndRadius.xyz;

				// Compute the distance from the receiving pixel to the box for masking
				// Apply local to world scale to take scale into account without transforming back to world space
				// Shrink the box by the transition distance (BoxScales.w) so that the fade happens inside the box influence area
				float4 BoxScales = CaptureBoxScales;
				float BoxDistance = ComputeDistanceFromBoxToPoint(-(BoxScales.xyz - .5f * BoxScales.w), BoxScales.xyz - .5f * BoxScales.w, LocalRayStart * BoxScales.xyz);

				// Setup a fade based on receiver distance to the box, hides the box influence shape
				float BoxDistanceAlpha = 1.0 - smoothstep(0, .7f * BoxScales.w, BoxDistance);
				// Setup a fade based on reflection ray intersection distance, hides the discontinuity between rays that just barely 
				float RayDistanceAlpha = smoothstep(0, BoxScales.w, Intersections.y * CapturePositionAndRadius.w * 2);
				DistanceAlpha = BoxDistanceAlpha * RayDistanceAlpha;
			}
		#endif
		
		BRANCH
		if (DistanceAlpha > 0)
		{
			float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(InGBufferData.Roughness);
			float4 Reflection = TextureCubeSampleLevel(ReflectionEnvironmentColorTexture, ReflectionEnvironmentColorSampler, ProjectedCaptureVector, AbsoluteSpecularMip);

			Reflection.rgb *= CaptureProperties.r;

			// Composite using the influence shape's alpha, which allows it to only override where it has valid data
			// Reflection texture was premultiplied by reflection alpha
			OutColor.rgb = (Reflection.rgb * SmoothColor + Luminance(Reflection.rgb) * RoughColor) * DistanceAlpha;
			OutColor.a = saturate(DistanceAlpha * Reflection.a);
		}
	}
}

Texture2D ReflectionEnvTexture;
SamplerState ReflectionEnvSampler;

Texture2D ScreenSpaceReflectionsTexture;
SamplerState ScreenSpaceReflectionsSampler;

/** Used to apply reflection capture contribution along with SSR to scene color. */
void ReflectionApplyPS(
	in float4 UVAndScreenPos : TEXCOORD0, 
	out float4 OutColor : SV_Target0)
{
	float2 UV = UVAndScreenPos.xy;

	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	FGBufferData GBuffer = ScreenSpaceData.GBuffer;
		
	float3 ReflectionEnv = Texture2DSample( ReflectionEnvTexture, ReflectionEnvSampler, UV ).rgb;
	
	// The reflection environment can contain NAN/INF on OS X so transform NaNs to black, transform negative colors to black.
	ReflectionEnv = -min(-ReflectionEnv, 0.0);
	
	float4 SSR = Texture2DSample( ScreenSpaceReflectionsTexture, ScreenSpaceReflectionsSampler, UV );

	// TODO if SpecularColor and Roughness were in same texture would remove 2 fetches
	float3 V = -normalize( mul( float4(UVAndScreenPos.zw, 1, 0), View.ScreenToWorld ).xyz );
	float NoV = saturate( dot( GBuffer.WorldNormal, V ) );
	SSR.rgb *= EnvBRDF( GBuffer.SpecularColor, GBuffer.Roughness, NoV );
	
	// The Screen Space Reflection can contain NAN/INF on OS X so transform NaNs to black, transform negative colors to black.
	SSR.rgba = -min(-SSR.rgba, 0.0);

	OutColor.rgb = ReflectionEnv * (1 - SSR.a) + SSR.rgb;
	OutColor.a = 0;
}

/** Used to apply sky light specular, with or without SSR. */
void SkyLightSpecularPS(
	in float4 UVAndScreenPos : TEXCOORD0, 
	out float4 OutColor : SV_Target0)
{
	float2 UV = UVAndScreenPos.xy;

	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	FGBufferData InGBufferData = ScreenSpaceData.GBuffer;
	
	float3 Lighting = 0; 

	BRANCH
	// Only light pixels marked as lit
	if (InGBufferData.LightingModelId > 0 && SkyLightParameters.y > 0)
	{
		float3 SmoothColor = 0;
		float3 RoughColor = 0;

		float3 CameraToPixel = normalize(mul(float4(UVAndScreenPos.zw, 1, 0), View.ScreenToWorld).xyz);
		GetReflectionSmoothAndRoughColor(ScreenSpaceData, CameraToPixel, SmoothColor, RoughColor);

		float3 ReflectionVector = reflect(CameraToPixel, InGBufferData.WorldNormal);
		float3 SkyLighting = GetSkyLightReflection(ReflectionVector, InGBufferData.Roughness);
		Lighting = SkyLighting * SmoothColor + Luminance(SkyLighting) * RoughColor;

#if APPLY_SSR
		float4 SSR = Texture2DSample( ScreenSpaceReflectionsTexture, ScreenSpaceReflectionsSampler, UV );

		// TODO if SpecularColor and Roughness were in same texture would remove 2 fetches
		float3 V = -CameraToPixel;
		float NoV = saturate( dot( InGBufferData.WorldNormal, V ) );
		SSR.rgb *= EnvBRDF(InGBufferData.SpecularColor, InGBufferData.Roughness, NoV);

		Lighting = Lighting * (1 - SSR.a) + SSR.rgb;
#endif
	}

	OutColor = float4(Lighting, 1); 
}