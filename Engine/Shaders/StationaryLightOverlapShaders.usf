// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	StationaryLightOverlapShaders.usf: Shaders for visualizing light overlap
=============================================================================*/

#include "Common.usf"
#include "DeferredShadingCommon.usf"
#include "DynamicLightingCommon.usf"

/** 1 if the light has a valid shadowmap channel. */
float HasValidChannel;

void OverlapDirectionalPixelMain(
	float2 InUV : TEXCOORD0,
	float3 ScreenVector : TEXCOORD1,
	out float4 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float4 WorldNormal = Texture2DSampleLevel(GBufferATexture, GBufferATextureSampler, InUV, 0) * float4(2,2,2,1) - float4(1,1,1,0);

	// Only light pixels marked as using deferred shading
	if (WorldNormal.w > 0)
	{
		// Output minor complexity to visualize overlap
		OutColor.rgb = .04f;

		if (HasValidChannel < 1)
		{
			// Output a huge amount of complexity to make it clear that this light is an error
			OutColor.rgb = .4f;
		}
	}
}

void OverlapRadialPixelMain(
	float4 InScreenPosition : TEXCOORD0,
	out float4 OutColor : SV_Target0
	)
{
	OutColor = 0;
	float2 ScreenUV = InScreenPosition.xy / InScreenPosition.w * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
	float4 WorldNormal = Texture2DSampleLevel(GBufferATexture, GBufferATextureSampler, ScreenUV, 0) * float4(2,2,2,1) - float4(1,1,1,0);
	
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(ScreenUV);

	BRANCH
	// Only light pixels marked as using deferred shading
	if (WorldNormal.w > 0)
	{
		float SceneDepth = CalcSceneDepth(ScreenUV);
		float4 HomogeneousWorldPosition = mul(float4(InScreenPosition.xy / InScreenPosition.w * SceneDepth, SceneDepth, 1), View.ScreenToWorld);
		float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

		float3 L = DeferredLightUniforms.NormalizedLightDirection;

		#if RADIAL_ATTENUATION
			L = DeferredLightUniforms.LightPosition - WorldPosition;
		#endif

		float SpotFalloff = 1;
		#if RADIAL_ATTENUATION
			SpotFalloff = SpotAttenuation(L.xyz, -DeferredLightUniforms.NormalizedLightDirection, DeferredLightUniforms.SpotAngles);
		#endif

		float RadialAttenuationRatio = length(WorldPosition - DeferredLightUniforms.LightPosition) * DeferredLightUniforms.LightInvRadius;

		if (RadialAttenuationRatio < 1
			&& SpotFalloff > .0001f)
		{
			// Output minor complexity to visualize overlap
			OutColor.rgb = .04f;

			if (HasValidChannel < 1)
			{
				// Output a huge amount of complexity to make it clear that this light is an error
				OutColor.rgb = .4f;
			}
		}
	}
}